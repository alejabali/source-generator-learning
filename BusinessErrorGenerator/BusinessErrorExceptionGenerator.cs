using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace BusinessErrorGenerator
{
    [Generator]
    public class BusinessErrorExceptionGenerator : IIncrementalGenerator
    {
        private static readonly DiagnosticDescriptor DuplicateError = new DiagnosticDescriptor(
            id: "BEEG001",
            title: "Código de erro duplicado",
            messageFormat: "O Código de erro '{0}' está duplicado",
            category: "BusinessErrorExceptionGenerador",
            defaultSeverity: DiagnosticSeverity.Error,
            isEnabledByDefault: true);

        public void Initialize(IncrementalGeneratorInitializationContext context)
        {
            context.RegisterPostInitializationOutput(ctx =>
            {
                ctx.AddSource("GeneratedSymbols.g.cs",
                    SourceText.From("namespace BusinessErrorGenerator { internal static class GeneratedSymbols { public const bool BUSINESSERRORS_GENERATED = true; } }",
                    Encoding.UTF8));
            });

            var fieldData = context.SyntaxProvider
                .CreateSyntaxProvider(
                predicate: (s, _) => {
                    if (s is FieldDeclarationSyntax field)
                    {
                        if (field.Parent is ClassDeclarationSyntax)
                        {
                            return field.Modifiers.Any(f => f.IsKind(Microsoft.CodeAnalysis.CSharp.SyntaxKind.StaticKeyword));
                        }
                    }
                    return false;
                },
                transform: (ctx, _) =>
                {
                    var fieldDeclaration = (FieldDeclarationSyntax)ctx.Node;
                    var fieldSymbol = ctx.SemanticModel.GetDeclaredSymbol(fieldDeclaration.Declaration.Variables.First()) as IFieldSymbol;

                    if (fieldSymbol is null)
                        return null;

                    var attributeData = fieldSymbol.GetAttributes().FirstOrDefault(att => att.AttributeClass?.Name == "ErrorAttribute");

                    if (attributeData is null)
                        return null;

                    var message = attributeData.ConstructorArguments.FirstOrDefault().Value?.ToString();

                    if (string.IsNullOrEmpty(message))
                        return null;

                    return new
                    {
                        ErrorCodeName = fieldSymbol.Name,
                        ErrorMessage = message,
                        Location = fieldSymbol.Locations.FirstOrDefault()
                    };
                })
                .Where(csp => csp != null)
                .Collect();

            context.RegisterSourceOutput(fieldData, (sourceContext, errors) =>
            {
                if (errors.IsDefaultOrEmpty)
                    return;

                var uniqueCodes = new HashSet<string>();

                foreach (var error in errors)
                {
                    if (!uniqueCodes.Add(error.ErrorCodeName))
                    {
                        sourceContext.ReportDiagnostic(
                            Diagnostic.Create(
                                DuplicateError,
                                error.Location,
                                error.ErrorCodeName));

                        return;
                    }
                }

                var sb = new StringBuilder();

                sb.AppendLine("// <auto-generated/>");
                sb.AppendLine("#nullable enable");
                sb.AppendLine();

                sb.AppendLine("public static partial class BusinessErrors");
                sb.AppendLine("{");

                sb.AppendLine("    private static readonly System.Collections.Generic.Dictionary<string, string> _errorMessages = new()");
                sb.AppendLine("    {");
                foreach (var error in errors)
                {
                    sb.AppendLine($"        {{ \"{error.ErrorCodeName}\", \"{error.ErrorMessage}\" }},");
                }
                sb.AppendLine("    };");
                sb.AppendLine();

                sb.AppendLine("    public static string GetMessage(string errorCode)");
                sb.AppendLine("    {");
                sb.AppendLine("        if (_errorMessages.TryGetValue(errorCode, out var message))");
                sb.AppendLine("        {");
                sb.AppendLine("            return message;");
                sb.AppendLine("        }");
                sb.AppendLine();
                sb.AppendLine("        return $\"Erro desconhecido: {errorCode}\";");
                sb.AppendLine("    }");

                sb.AppendLine("}");

                sourceContext.AddSource("BusinessErrors.g.cs", SourceText.From(sb.ToString(), Encoding.UTF8));
            });
        }
    }
}
